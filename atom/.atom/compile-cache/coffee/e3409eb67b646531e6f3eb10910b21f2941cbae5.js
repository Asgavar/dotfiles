(function() {
  var CompositeDisposable, Emitter, MATCH_PAIRS, RailroadDiagramElement, Range, debounce, issue58, log_debug, ref;

  ref = require('atom'), CompositeDisposable = ref.CompositeDisposable, Emitter = ref.Emitter, Range = ref.Range;

  debounce = require("underscore-plus").debounce;

  RailroadDiagramElement = require("./railroad-diagram-element.coffee");

  MATCH_PAIRS = {
    '(': ')',
    '[': ']',
    '{': '}',
    '<': '>'
  };

  issue58 = require('semver').lt(atom.appVersion, "1.18.0");

  log_debug = console.log.bind(console, "rx2rr");

  log_debug = function() {};

  module.exports = {
    regexRailroadDiagramView: null,
    config: {
      enabled: {
        type: "boolean",
        "default": true
      }
    },
    activate: function(state) {
      this.subscriptions = new CompositeDisposable;
      this.emitter = new Emitter;
      this.element = (new RailroadDiagramElement).initialize(this);
      this.subscriptions.add(atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          return _this.subscriptions.add(editor.onDidChangeCursorPosition(debounce((function() {
            return _this.checkForRegExp();
          }), 100)));
        };
      })(this)));
      this.subscriptions.add(atom.commands.add('atom-text-editor', {
        'regex-railroad-diagram:show': (function(_this) {
          return function() {
            var editor, flavour, options;
            if (!_this.element.isVisible()) {
              console.log("is not visible");
              flavour = 'perl';
              options = '';
              editor = atom.workspace.getActiveTextEditor();
              _this.element.showDiagram(editor.getSelectedText(), {
                flavour: flavour,
                options: options
              });
              return _this.element.focusTextEditor();
            } else {
              return console.log("is visible");
            }
          };
        })(this)
      }));
      if (atom.config.get('regex-railroad-diagram.enabled')) {
        return this.addDisableCommand();
      } else {
        return this.addEnableCommand();
      }
    },
    addDisableCommand: function() {
      return this.cur_cmd = atom.commands.add("atom-workspace", "regex-railroad-diagram:disable", (function(_this) {
        return function() {
          _this.cur_cmd.dispose();
          atom.config.set('regex-railroad-diagram.enabled', false);
          _this.addEnableCommand();
          return _this.checkForRegExp();
        };
      })(this));
    },
    addEnableCommand: function() {
      return this.cur_cmd = atom.commands.add("atom-workspace", "regex-railroad-diagram:enable", (function(_this) {
        return function() {
          _this.cur_cmd.dispose();
          atom.config.set('regex-railroad-diagram.enabled', true);
          _this.addDisableCommand();
          return _this.checkForRegExp();
        };
      })(this));
    },
    deactivate: function() {
      return this.subscriptions.dispose();
    },
    serialize: function() {},
    bufferRangeForScope: function(editor, scope, position) {
      var end, endTabs, lineStart, m, result, start, startTabs, tabLength;
      if (position == null) {
        position = null;
      }
      if (!issue58) {
        if (position != null) {
          result = editor.bufferRangeForScopeAtPosition(scope, position);
        } else {
          result = editor.bufferRangeForScopeAtCursor(scope);
        }
        return result;
      }
      tabLength = editor.getTabLength();
      if (position == null) {
        position = editor.getCursorBufferPosition().copy();
      }
      lineStart = [[position.row, 0], [position.row, position.column]];
      if (m = editor.getTextInBufferRange(lineStart).match(/\t/g)) {
        startTabs = m.length;
      } else {
        startTabs = 0;
      }
      if (startTabs) {
        position.column = position.column - startTabs + startTabs * tabLength;
      }
      result = editor.bufferRangeForScopeAtPosition(scope, position);
      if (!result) {
        return result;
      }
      start = result.start, end = result.end;
      lineStart = [[end.row, 0], [end.row, end.column]];
      if (m = editor.getTextInBufferRange(lineStart).match(/\t/g)) {
        endTabs = m.length;
      } else {
        endTabs = 0;
      }
      return new Range([start.row, start.column - startTabs * tabLength + startTabs], [end.row, end.column - endTabs * tabLength + endTabs]);
    },
    getRegexpBufferRange: function(editor) {
      var flavour, position, range;
      position = editor.getCursorBufferPosition();
      flavour = editor.scopeDescriptorForBufferPosition(position).scopes[0];
      range = this.bufferRangeForScope(editor, '.raw-regex');
      if (!range) {
        range = this.bufferRangeForScope(editor, '.unicode-raw-regex');
      }
      if (!range) {
        range = this.bufferRangeForScope(editor, '.regexp');
      }
      if (!range) {
        return [null, null];
      }
      return [range, flavour];
    },
    cleanRegex: function(regex, flavour) {
      var close, expectedClose, m, open, opts, ref1, ref2, ref3, ref4, ref5, regexForEscaped, text;
      opts = "";
      log_debug("cleanRegex", regex, flavour);
      if (m = flavour.match(/php/) && regex.match(/^(["'])\/(.*)\/(\w*)\1$/)) {
        ref1 = m.slice(2), regex = ref1[0], opts = ref1[1];
      } else if (m = flavour.match(/python|julia/) && regex.match(/^u?r('''|"""|"|')(.*)\1$/)) {
        regex = m[2];
      } else if (m = flavour.match(/coffee/) && regex.match(/^\/\/\/(.*)\/\/\/(\w*)/)) {
        ref2 = m.slice(1), regex = ref2[0], opts = ref2[1];
      } else if (m = flavour.match(/ruby/) && regex.match(/^%r(.)(.*)(\W)(\w*)$/)) {
        ref3 = m.slice(1), open = ref3[0], text = ref3[1], close = ref3[2], opts = ref3[3];
        expectedClose = MATCH_PAIRS[open] || open;
        if (close !== expectedClose) {
          text = text + close + m[4];
          close = expectedClose;
        }
        regexForEscaped = new RegExp("\\\\(" + open + "|" + close + ")", 'g');
        regex = text.replace(new RegExp("\\/", '\\/').replace(regexForEscaped, '$1'));
      } else if (m = flavour.match(/perl/) && (regex.match(/^(?:m|qr)(.)(.*)(\1|\W)(\w*)$/) || regex.match(/^s(.)(.*)(\1|\W)(?:\1.*\W|.*\1)(\w*)$/))) {
        ref4 = m.slice(1), open = ref4[0], text = ref4[1], close = ref4[2], opts = ref4[3];
        expectedClose = MATCH_PAIRS[open] || open;
        if (close !== expectedClose) {
          text = text + close + m[4];
          close = expectedClose;
        }
        regexForEscaped = new RegExp("\\\\(" + open + "|" + close + ")", 'g');
        regex = text.replace(/\//, '\\/').replace(regexForEscaped, '$1');
      } else if (m = regex.match(/^\/(.*)\/(\w*)$/)) {
        ref5 = m.slice(1), regex = ref5[0], opts = ref5[1];
      }
      log_debug("cleanRegex done:", regex, opts);
      return [regex, opts];
    },
    checkForRegExp: function() {
      var editor, flavour, options, range, ref1, ref2, regex;
      if (!atom.config.get('regex-railroad-diagram.enabled')) {
        return this.element.assertHidden();
      }
      editor = atom.workspace.getActiveTextEditor();
      if (editor == null) {
        return;
      }
      ref1 = this.getRegexpBufferRange(editor), range = ref1[0], flavour = ref1[1];
      log_debug("range", range, "flavour", flavour);
      if (!range) {
        return this.element.assertHidden();
      } else {
        regex = editor.getTextInBufferRange(range).trim();
        if (regex === '/') {
          return this.element.assertHidden();
        }
        ref2 = this.cleanRegex(regex, flavour), regex = ref2[0], options = ref2[1];
        return this.element.showDiagram(regex, {
          flavour: flavour,
          options: options
        });
      }
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
